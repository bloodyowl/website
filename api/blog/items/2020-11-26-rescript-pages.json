{"slug":"2020-11-26-rescript-pages","filename":"2020-11-26-rescript-pages","title":"ReScript Pages","date":"Thu, 26 Nov 2020 00:00:00 GMT","draft":false,"meta":{"title":"ReScript Pages","date":"2020-11-26T00:00:00.000Z"},"body":"<p>Last year, I wrote about how this <a href=\"/blog/2019-01-22-static-single-page-application\">static single application</a> was built. From that time, I had to build several static websites, and at some point had to make them simpler to use.</p>\n<p>The main websites I've built with the previous solutions are quite different:</p>\n<ul>\n<li><a href=\"https://bloodyowl.io\">This website</a>, which is fairly simple and just has a blog and a static page</li>\n<li><a href=\"https://putaindecode.io\">Putain de code!</a>, which has a bit more content</li>\n<li><a href=\"https://beop.io\">BeOp</a>, our company website, which needs i18n, and requires more ease of use, as not only tech people work on it</li>\n</ul>\n<p><img alt=\"BeOp\" onload=\"this.style.opacity=1\" src=\"/public/assets/images/beop.webp\" width=\"2644\" height=\"1644\" loading=\"lazy\" /></p>\n<p>I recently rebuilt the latter, and wanted to share the resources between the three. I believe that in development, it is good to <strong>repeat yourself</strong> at first, observe what time does, <strong>then</strong> commonise what you can.</p>\n<p>So I started creating a shared Â«frameworkÂ» that'd work on the three websites: <a href=\"https://github.com/bloodyowl/rescript-pages\">ReScript Pages</a>.</p>\n<p>Fundamentally, the principles from <a href=\"/blog/2019-01-22-static-single-page-application\">the previous post</a> apply, except it's <em>a bit</em> more flexible and complete.</p>\n<h2>1. A user-friendly dev server</h2>\n<p>My previous solution made you run a command after updating some files so that you could preview. That was annoying in the long run. ReScript Pages includes a dev server with a live reload.</p>\n<video style=\"width:100%\" src=\"/public/assets/videos/dev.mov\" controls>\n</video>\n<h2>2. Same experience in dev</h2>\n<p>The dev server gives you the pre-rendered page: no surprises with hydration.</p>\n<h2>3. i18n native support</h2>\n<p>The configuration gives you <code>variants</code> for each language you have. The various paths and subdirectories are handled without needing to do anything else: all your links will work without needing to touch anything.</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-keyword\">let</span> default =\n  <span class=\"hljs-module-identifier\">Pages</span>.make(\n    make,\n    {\n      siteTitle: <span class=\"hljs-string\">&quot;Matthias Le Brun&quot;</span>,\n      siteDescription: <span class=\"hljs-string\">&quot;Front-end developer and designer. ReasonML, ReasonReact, ReactJS.&quot;</span>,\n      mode: <span class=\"hljs-constructor\">SPA</span>,\n      distDirectory: <span class=\"hljs-string\">&quot;dist&quot;</span>,\n      baseUrl: <span class=\"hljs-string\">&quot;https://bloodyowl.io&quot;</span>,\n      staticsDirectory: <span class=\"hljs-constructor\">Some</span>(<span class=\"hljs-string\">&quot;statics&quot;</span>),\n      paginateBy: <span class=\"hljs-number\">20</span>,\n      variants: <span class=\"hljs-literal\">[|</span>\n        {\n          subdirectory: <span class=\"hljs-constructor\">None</span>,\n          localeFile: <span class=\"hljs-constructor\">None</span>,\n          contentDirectory: <span class=\"hljs-string\">&quot;contents&quot;</span>,\n          getUrlsToPrerender: ({getAll}) =&gt;\n            <span class=\"hljs-module-identifier\">Array</span>.concatMany(<span class=\"hljs-literal\">[|</span>\n              <span class=\"hljs-literal\">[|</span><span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-string\">&quot;blog&quot;</span><span class=\"hljs-literal\">|]</span>,\n              getAll(<span class=\"hljs-string\">&quot;blog&quot;</span>)<span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">Array</span>.map(slug =&gt; <span class=\"hljs-string\">&quot;/blog/&quot;</span> <span class=\"hljs-operator\">++</span> slug),\n              <span class=\"hljs-literal\">[|</span><span class=\"hljs-string\">&quot;404.html&quot;</span><span class=\"hljs-literal\">|]</span>,\n            <span class=\"hljs-literal\">|]</span>),\n        },\n      <span class=\"hljs-literal\">|]</span>,\n    },\n  );\n</code></pre>\n<h2>4. Easy SEO &amp; styling</h2>\n<p>I've embedded <a href=\"https://github.com/nfl/react-helmet\">react-helmet</a> and <a href=\"https://github.com/reasonml-labs/bs-css\">bs-css</a> so that everything can be pre-rendered properly, with all the good parts in.</p>\n<h2>5. A damn simple API</h2>\n<p>Here's the actual component displaying this very page:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-attribute\">[@react.component]</span>\n<span class=\"hljs-keyword\">let</span> make = (~slug, ()) =&gt; {\n  <span class=\"hljs-keyword\">let</span> post = <span class=\"hljs-module-identifier\">Pages</span>.useItem(<span class=\"hljs-string\">&quot;blog&quot;</span>, ~id=slug);\n  &lt;&gt;\n    {<span class=\"hljs-keyword\">switch</span> (post) {\n     | <span class=\"hljs-constructor\">NotAsked</span>\n     | <span class=\"hljs-constructor\">Loading</span> =&gt; &lt;<span class=\"hljs-module-identifier\">ActivityIndicator</span> /&gt;\n     | <span class=\"hljs-constructor\">Done</span>(<span class=\"hljs-constructor\">Ok</span>(post)) =&gt;\n       &lt;&gt;\n         &lt;<span class=\"hljs-module-identifier\">Pages</span>.<span class=\"hljs-constructor\">Head</span>&gt; &lt;title&gt; post.title<span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">React</span>.string &lt;/title&gt; &lt;/<span class=\"hljs-module-identifier\">Pages</span>.<span class=\"hljs-constructor\">Head</span>&gt;\n         &lt;div className=<span class=\"hljs-module-identifier\">Styles</span>.container&gt;\n           &lt;h1 className=<span class=\"hljs-module-identifier\">Styles</span>.title&gt; post.title<span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">ReasonReact</span>.string &lt;/h1&gt;\n           &lt;div className=<span class=\"hljs-module-identifier\">Styles</span>.date&gt;\n             {post.date\n              <span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">Option</span>.map(<span class=\"hljs-module-identifier\">Js</span>.<span class=\"hljs-module-identifier\">Date</span>.fromString)\n              <span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">Option</span>.map(<span class=\"hljs-module-identifier\">Date</span>.getFormattedString)\n              <span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">Option</span>.map(<span class=\"hljs-module-identifier\">ReasonReact</span>.string)\n              <span class=\"hljs-operator\">-&gt;</span><span class=\"hljs-module-identifier\">Option</span>.getOr(<span class=\"hljs-module-identifier\">React</span>.null)}\n           &lt;/div&gt;\n           &lt;div\n             className=<span class=\"hljs-module-identifier\">Styles</span>.body\n             dangerouslySetInnerHTML={<span class=\"hljs-string\">&quot;__html&quot;</span>: post.body}\n           /&gt;\n           &lt;<span class=\"hljs-module-identifier\">BeOpWidget</span> /&gt;\n         &lt;/div&gt;\n       &lt;/&gt;\n     | <span class=\"hljs-constructor\">Done</span>(<span class=\"hljs-constructor\">Error</span>(_)) =&gt; &lt;<span class=\"hljs-module-identifier\">ErrorIndicator</span> /&gt;\n     }}\n  &lt;/&gt;;\n};\n</code></pre>\n<p>React Hooks really have unlocked a way to make <strong>APIs that look and feel simple</strong>.</p>\n<h2>6. Some bonus features</h2>\n<ul>\n<li>RSS feed generation</li>\n<li>Sitemap generation</li>\n<li>Post scheduling support</li>\n</ul>\n<h2>Conclusion</h2>\n<p>Overall it's been a really fun project to build (and also a bit frustrating, let's be honest, tweaking complex path resolutions, utterly complex webpack configs and flexible data-stores isn't always a pleasure).</p>\n<p>If you're curious, don't hesitate to check:</p>\n<ul>\n<li><a href=\"https://bloodyowl.github.io/rescript-pages/\">ReScript Pages docs</a></li>\n<li><a href=\"https://github.com/bloodyowl/rescript-pages\">ReScript Pages source</a></li>\n<li><a href=\"https://github.com/bloodyowl/website\">This website source</a></li>\n</ul>\n<p>Hope you like it! ðŸ‘‹</p>\n"}